Parameters:
  # vpc
  LMSVPCCidr:
    Description: CIDR block should be used to create the VPC (e.g. 10.0.0.0/16)
    Type: String
    Default: 10.0.0.0/16
  # subnet
  LMSSubnet1aPrivateDataCidr:
    Description: CIDR block should be used to create the private data subnet in AZ1 (e.g. 10.0.64.0/19)
    Type: String
    Default: 10.0.64.0/19
  LMSSubnet1aPrivateAppCidr:
    Description: CIDR block should be used to create the private app subnet in AZ1 (e.g. 10.0.0.0/19)
    Type: String
    Default: 10.0.0.0/19
  LMSSubnet1aPublicCidr:
    Description: CIDR block should be used to create the public subnet in AZ1 (e.g. 10.0.128.0/20)
    Type: String
    Default: 10.0.128.0/20
  LMSSubnet1cPrivateDataCidr:
    Description: CIDR block should be used to create the private data subnet in AZ2 (e.g. 10.0.160.0/19)
    Type: String
    Default: 10.0.160.0/19
  LMSSubnet1cPrivateAppCidr:
    Description: CIDR block should be used to create the private app subnet in AZ2 (e.g. 10.0.32.0/19)
    Type: String
    Default: 10.0.32.0/19
  LMSSubnet1cPublicCidr:
    Description: CIDR block should be used to create the public subnet in AZ2 (e.g. 10.0.144.0/20)
    Type: String
    Default: 10.0.144.0/20
  # security group
  LMSSecurityGroupLoadBalancerHttpCidr:
    Description: CIDR block that allow http access to load balancer (e.g. 0.0.0.0/0)
    Type: String
    Default: 0.0.0.0/0
  LMSSecurityGroupLoadBalancerHttpsCidr:
    Description: CIDR block that allow https access to load balancer (e.g. 0.0.0.0/0)
    Type: String
    Default: 0.0.0.0/0
  LMSSecurityGroupBastionCidr:
    Description: CIDR block that allow ssh access to bastion (e.g. 0.0.0.0/0)
    Type: String
    Default: 0.0.0.0/0

Resources:
  LMSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref LMSVPCCidr
      Tags:
        - Key: Name
          Value: lms-vpc-${opt:stage, self:custom.defaultStage}
  LMSInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: lms-internet-gateway-${opt:stage, self:custom.defaultStage}
  LMSVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref LMSVPC
      InternetGatewayId: !Ref LMSInternetGateway

  # Subnet
  LMSSubnet1aPrivateData:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref LMSSubnet1aPrivateDataCidr
      Tags:
        - Key: Name
          Value: lms-subnet-1a-private-data-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
  LMSSubnet1aPrivateApp:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref LMSSubnet1aPrivateAppCidr
      Tags:
        - Key: Name
          Value: lms-subnet-1a-private-app-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
  LMSSubnet1aPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      CidrBlock: !Ref LMSSubnet1aPublicCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: lms-subnet-1a-public-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
  LMSSubnet1cPrivateData:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref LMSSubnet1cPrivateDataCidr
      Tags:
        - Key: Name
          Value: lms-subnet-1c-private-data-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
  LMSSubnet1cPrivateApp:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref LMSSubnet1cPrivateAppCidr
      Tags:
        - Key: Name
          Value: lms-subnet-1c-private-app-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
  LMSSubnet1cPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      CidrBlock: !Ref LMSSubnet1cPublicCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: lms-subnet-1c-public-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC

  # DB Subnet Group
  LMSDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: lms-db-subnet-group-${opt:stage, self:custom.defaultStage}
      DBSubnetGroupName: lms-db-subnet-group-${opt:stage, self:custom.defaultStage}
      SubnetIds:
        - !Ref LMSSubnet1aPrivateData
        - !Ref LMSSubnet1cPrivateData

  # NAT
  LMSEIP1a:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: lms-eip-1a-${opt:stage, self:custom.defaultStage}
  LMSEIP1c:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: lms-eip-1c-${opt:stage, self:custom.defaultStage}
  LMSNatGateway1a:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt LMSEIP1a.AllocationId
      SubnetId: !Ref LMSSubnet1aPublic
      Tags:
        - Key: Name
          Value: lms-nat-gateway-1a-${opt:stage, self:custom.defaultStage}
  LMSNatGateway1c:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt LMSEIP1c.AllocationId
      SubnetId: !Ref LMSSubnet1cPublic
      Tags:
        - Key: Name
          Value: lms-nat-gateway-1c-${opt:stage, self:custom.defaultStage}

  # Route table for private data subnet 1a
  LMSPrivateDataRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-private-data-route-table-1a-${opt:stage, self:custom.defaultStage}
  LMSDefaultPrivateDataRoute1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LMSPrivateDataRouteTable1a
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref LMSNatGateway1a
  LMSPrivateDataSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LMSSubnet1aPrivateData
      RouteTableId: !Ref LMSPrivateDataRouteTable1a

  # Route table for private app subnet 1a
  LMSPrivateAppRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-private-app-route-table-1a-${opt:stage, self:custom.defaultStage}
  LMSDefaultPrivateAppRoute1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LMSPrivateAppRouteTable1a
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref LMSNatGateway1a
  LMSPrivateAppSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LMSSubnet1aPrivateApp
      RouteTableId: !Ref LMSPrivateAppRouteTable1a

  # Route table for private app subnet 1a
  LMSPublicRouteTable1a:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-public-route-table-1a-${opt:stage, self:custom.defaultStage}
  LMSDefaultPublicRoute1a:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LMSPublicRouteTable1a
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LMSInternetGateway
  LMSPublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LMSSubnet1aPublic
      RouteTableId: !Ref LMSPublicRouteTable1a

  # Route table for private data subnet 1c
  LMSPrivateDataRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-private-data-route-table-1c-${opt:stage, self:custom.defaultStage}
  LMSDefaultPrivateDataRoute1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LMSPrivateDataRouteTable1c
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref LMSNatGateway1c
  LMSPrivateDataSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LMSSubnet1cPrivateData
      RouteTableId: !Ref LMSPrivateDataRouteTable1c

  # Route table for private app subnet 1c
  LMSPrivateAppRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-private-app-route-table-1c-${opt:stage, self:custom.defaultStage}
  LMSDefaultPrivateAppRoute1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LMSPrivateAppRouteTable1c
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref LMSNatGateway1c
  LMSPrivateAppSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LMSSubnet1cPrivateApp
      RouteTableId: !Ref LMSPrivateAppRouteTable1c

  # Route table for private app subnet 1c
  LMSPublicRouteTable1c:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-public-route-table-1c-${opt:stage, self:custom.defaultStage}
  LMSDefaultPublicRoute1c:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LMSPublicRouteTable1c
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref LMSInternetGateway
  LMSPublicSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref LMSSubnet1cPublic
      RouteTableId: !Ref LMSPublicRouteTable1c

  # Security Group
  LMSSecurityGroupLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lms-security-group-load-balancer-${opt:stage, self:custom.defaultStage}
      GroupName: lms-security-group-load-balancer-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-security-group-load-balancer-${opt:stage, self:custom.defaultStage}
      SecurityGroupIngress:
        - Description: http from internet
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref LMSSecurityGroupLoadBalancerHttpCidr
        - Description: https from internet
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref LMSSecurityGroupLoadBalancerHttpsCidr
  LMSSecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lms-security-group-bastion-${opt:stage, self:custom.defaultStage}
      GroupName: lms-security-group-bastion-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-security-group-bastion-${opt:stage, self:custom.defaultStage}
      SecurityGroupIngress:
        - Description: ssh from internet
          IpProtocol: tcp
          FromPort: 59222
          ToPort: 59222
          CidrIp: !Ref LMSSecurityGroupBastionCidr
  LMSSecurityGroupECSClusterService:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lms-security-group-ecs-cluster-service-${opt:stage, self:custom.defaultStage}
      GroupName: lms-security-group-ecs-cluster-service-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-security-group-ecs-cluster-service-${opt:stage, self:custom.defaultStage}
      SecurityGroupIngress:
        - Description: https from load balancer
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LMSSecurityGroupLoadBalancer
  LMSSecurityGroupRds:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: lms-security-group-rds-${opt:stage, self:custom.defaultStage}
      GroupName: lms-security-group-rds-${opt:stage, self:custom.defaultStage}
      VpcId: !Ref LMSVPC
      Tags:
        - Key: Name
          Value: lms-security-group-rds-${opt:stage, self:custom.defaultStage}
      SecurityGroupIngress:
        - Description: mysql from ecs cluster service
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LMSSecurityGroupECSClusterService

Outputs:
  # Subnet outputs
  LMSSubnet1aPrivateData:
    Value: !Ref LMSSubnet1aPrivateData
  LMSSubnet1aPrivateApp:
    Value: !Ref LMSSubnet1aPrivateApp
  LMSSubnet1aPublic:
    Value: !Ref LMSSubnet1aPublic
  LMSSubnet1cPrivateData:
    Value: !Ref LMSSubnet1cPrivateData
  LMSSubnet1cPrivateApp:
    Value: !Ref LMSSubnet1cPrivateApp
  LMSSubnet1cPublic:
    Value: !Ref LMSSubnet1cPublic
  # DB Subnet Group outputs
  LMSDbSubnetGroup:
    Value: !Ref LMSDbSubnetGroup
  # Security Group outputs
  LMSSecurityGroupLoadBalancer:
    Value: !Ref LMSSecurityGroupLoadBalancer
  LMSSecurityGroupBastion:
    Value: !Ref LMSSecurityGroupBastion
  LMSSecurityGroupECSClusterService:
    Value: !Ref LMSSecurityGroupECSClusterService
  LMSSecurityGroupRds:
    Value: !Ref LMSSecurityGroupRds
