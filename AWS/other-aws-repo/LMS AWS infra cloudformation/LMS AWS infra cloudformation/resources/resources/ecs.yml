Parameters:
  # Task Definition
  LMSTaskDefinitionWebMemory:
    Type: String
    Description: Memory for web service in MiB (e.g. 512, 1024)
    Default: 512
  LMSTaskDefinitionWebCpu:
    Type: String
    Description: Cpu unit for web service (e.g. 256, 512)
    Default: 256
  LMSTaskDefinitionConsoleCommandMemory:
    Type: String
    Description: Memory for console command task in MiB (e.g. 512, 1024)
    Default: 512
  LMSTaskDefinitionConsoleCommandCpu:
    Type: String
    Description: Cpu unit for console command task (e.g. 256, 512)
    Default: 256
  # Auto Scale
  LMSAutoScalingTargetMinContainers:
    Type: Number
    Default: 1
  LMSAutoScalingTargetMaxContainers:
    Type: Number
    Default: 10
  LMSAutoScalingTargetValue:
    Type: Number
    Description: target CPU utilization (%)
    Default: 50
  # Load balancer
  LMSLoadBalancerCertificateARN:
    Description: The ARN of certificate in ACM (ap-northeast-1) for load balancer (e.g. arn:aws:acm:ap-northeast-1:231898895154:certificate/79fcdae3-4d81-472b-8b80-bb84f38b3cc0)
    Type: String
  # ses identity
  LMSSESIdentityARN:
    Description: The ARN of domain in SES (ap-northeast-1) for identity (e.g. arn:aws:ses:ap-northeast-1:231898895154:identity/nichiboh.co.jp")
    Type: String
  # from domain
  LMSSESMailFromDomain:
    Description: The define allows sending emails from address (e.g. info@nichiboh.co.jp, *@nichiboh.co.jp")
    Type: String
    Default: "*@nichiboh.co.jp"

Resources:
  # Task definition
  LMSTaskDefinitionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lms-task-definition-execution-role-${opt:stage, self:custom.defaultStage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  LMSTaskDefinitionTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lms-task-definition-task-role-${opt:stage, self:custom.defaultStage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
  LMSNginxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/lms-ecs-service-${opt:stage, self:custom.defaultStage}/nginx
  LMSPhpLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/lms-ecs-service-${opt:stage, self:custom.defaultStage}/php
  LMSTaskDefinitionWeb:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: lms-task-definition-web-${opt:stage, self:custom.defaultStage}
      TaskRoleArn: !Ref LMSTaskDefinitionTaskRole
      ExecutionRoleArn: !Ref LMSTaskDefinitionExecutionRole
      NetworkMode: awsvpc
      Memory: !Ref LMSTaskDefinitionWebMemory
      Cpu: !Ref LMSTaskDefinitionWebCpu
      ContainerDefinitions:
        - Name: nginx
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${LMSEcrRepositoryNginx}:latest
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LMSNginxLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
        - Name: php
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${LMSEcrRepositoryPHP}:latest
          PortMappings:
            - ContainerPort: 9000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LMSPhpLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
  LMSTaskDefinitionConsoleCommand:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: lms-task-definition-console-command-${opt:stage, self:custom.defaultStage}
      TaskRoleArn: !Ref LMSTaskDefinitionTaskRole
      ExecutionRoleArn: !Ref LMSTaskDefinitionExecutionRole
      NetworkMode: awsvpc
      Memory: !Ref LMSTaskDefinitionConsoleCommandMemory
      Cpu: !Ref LMSTaskDefinitionConsoleCommandCpu
      ContainerDefinitions:
        - Name: php
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${LMSEcrRepositoryPHP}:latest
          PortMappings:
            - ContainerPort: 9000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LMSPhpLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # Cluster
  LMSEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: lms-ecs-cluster-${opt:stage, self:custom.defaultStage}

  # Service
  LMSEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - LMSLoadBalancerListenerHTTPS
    Properties:
      LaunchType: FARGATE
      TaskDefinition: !Ref LMSTaskDefinitionWeb
      Cluster: !Ref LMSEcsCluster
      ServiceName: lms-ecs-service-${opt:stage, self:custom.defaultStage}
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref LMSSubnet1aPrivateApp
            - !Ref LMSSubnet1cPrivateApp
          SecurityGroups:
            - !Ref LMSSecurityGroupECSClusterService
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref LMSLoadBalancerTargetGroup

  # Load balancer
  LMSLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: lms-target-group-${opt:stage, self:custom.defaultStage}
      Protocol: HTTP
      Port: 80
      VpcId: !Ref LMSVPC
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
      TargetType: ip
  LMSLoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LMSLoadBalancerTargetGroup
      LoadBalancerArn: !Ref LMSLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref LMSLoadBalancerCertificateARN
  LMSLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: lms-load-balancer-${opt:stage, self:custom.defaultStage}
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref LMSSubnet1aPublic
        - !Ref LMSSubnet1cPublic
      SecurityGroups:
        - !Ref LMSSecurityGroupLoadBalancer

  # Auto scale
  LMSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lms-auto-scaling-role-${opt:stage, self:custom.defaultStage}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  LMSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref LMSAutoScalingTargetMinContainers
      MaxCapacity: !Ref LMSAutoScalingTargetMaxContainers
      ResourceId:
        !Join ["/", [service, !Ref LMSEcsCluster, !GetAtt LMSEcsService.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt LMSAutoScalingRole.Arn
  LMSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: lms-auto-scaling-policy-${opt:stage, self:custom.defaultStage}
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref LMSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 100
        ScaleOutCooldown: 100
        TargetValue: !Ref LMSAutoScalingTargetValue

  # SES Policy
  LMSSESGroup:
    Type: AWS::IAM::Group
    Properties: 
      GroupName: lms-ses-group-${opt:stage, self:custom.defaultStage}
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
  LMSSESPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lms-ses-policy-${opt:stage, self:custom.defaultStage}
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "SES:SendEmail"
              - "SES:SendRawEmail"
            Resource: !Ref LMSSESIdentityARN
            Condition:
              StringLike:
                ses:FromAddress: !Ref LMSSESMailFromDomain
      Groups:
        - !Ref LMSSESGroup

Outputs:
  LMSLoadBalancerDomainName:
    Value: !GetAtt LMSLoadBalancer.DNSName
  LMSEcsClusterName:
    Value: lms-ecs-cluster-${opt:stage, self:custom.defaultStage}
  LMSEcsServiceName:
    Value: !GetAtt LMSEcsService.Name
